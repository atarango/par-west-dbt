version: 2

models:
  - name: stg_woocommerce_customers
    description: >
      Staging model for WooCommerce customers. One row per customer from
      `raw_woocommerce.customers`, with normalized IDs, canonical email, names,
      and timestamps.
    config:
      contract:
        enforced: true
    columns:
      - name: wc_customer_id
        description: "WooCommerce internal customer id (cast to string)."
        data_type: string
        tests: [not_null]

      - name: customer_email
        description: >
          Canonical email for the customer. Takes top-level email if present,
          else falls back to billing.email. Lowercased and trimmed.
        data_type: string
        tests:
          - not_null:
              config: {severity: warn}

      - name: first_name
        data_type: string
        tests:
          - not_null: {config: {severity: warn}}

      - name: last_name
        data_type: string
        tests:
          - not_null: {config: {severity: warn}}

      - name: first_seen_at
        description: "Timestamp when the customer record was created."
        data_type: timestamp
        tests: [not_null]

      - name: raw_last_seen_at
        description: "Raw source last-modified timestamp; may be null if never updated."
        data_type: timestamp

      - name: last_seen_at
        description: "Downstream-friendly last seen timestamp (coalesces raw_last_seen_at to first_seen_at)."
        data_type: timestamp
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              arguments:
                # NOTE: column name is implicit here (this column)
                expression: ">= first_seen_at"

      - name: last_seen_at_imputed
        description: "Boolean flag indicating last_seen_at was filled from first_seen_at (raw_last_seen_at was null)."
        data_type: boolean
        tests: [not_null]

  - name: stg_woocommerce_orders
    description: "WooCommerce orders (1 row per order_id); UTC timestamps; guest-aware customer handling."
    columns:
      - name: order_id
        tests:
          - not_null: {}
          - unique: {}

      - name: order_number
        tests: []

      - name: order_status
        tests:
          - accepted_values:
              arguments:
                values: ['pending','processing','on-hold','completed','cancelled','refunded','failed','trash','unknown']
              config:
                severity: warn

      - name: order_total
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              arguments:
                min_value: 0
                strictly: true

      - name: discount_total
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              arguments:
                min_value: 0
                strictly: true

      - name: total_tax
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              arguments:
                min_value: 0
                strictly: true

      - name: shipping_total
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              arguments:
                min_value: 0
                strictly: true

      - name: discount_tax
        tests: []

      - name: shipping_tax
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              arguments:
                min_value: 0
                strictly: true

      - name: customer_email
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: "REGEXP_CONTAINS(customer_email, '^[^@]+@[^@]+\\.[^@]+$')"
              config:
                where: "customer_email is not null and customer_email != ''"

      # customer_ip_address: relaxed IPv4/IPv6-ish characters; warn-only; skip blanks
      - name: customer_ip_address
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: "REGEXP_CONTAINS(customer_ip_address, '^[0-9A-Fa-f:.]+$')"
              config:
                where: "customer_ip_address is not null and customer_ip_address != ''"
                severity: warn

      - name: wc_customer_id
        tests: []

      - name: is_guest_order
        tests: []

      - name: order_date
        tests:
          - not_null: {}

      - name: modified_at
        tests:
          - not_null: {}

  - name: stg_woocommerce__order_items   # keep your current name (double underscore)
    description: "One row per order line item."
    config:
      contract:
        enforced: true
    columns:
      - name: order_id
        data_type: int64
        tests: [not_null]
      - name: order_item_id
        data_type: int64
        tests: [not_null]
      - name: sku
        data_type: string
        tests:
          - not_null:
              where: "product_id is not null"
      - name: subtotal
        data_type: numeric
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: ">= 0"
      - name: total_tax
        data_type: numeric
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: ">= 0"
    tests:
      - dbt_utils.unique_combination_of_columns:
          arguments:
            combination_of_columns: ['order_id', 'order_item_id']

  - name: stg_woocommerce_shipping_lines
    description: >
      One row per shipping line on a WooCommerce order. Explodes
      `raw_woocommerce.orders.shipping_lines` and standardizes common fields.
    config:
      contract:
        enforced: true
    columns:
      - name: order_id
        description: "WooCommerce order ID."
        data_type: int64
        tests:
          - not_null
          - relationships:
              to: ref('stg_woocommerce_orders')
              field: order_id

      - name: order_ts
        description: "Timestamp when the order was created (warehouse timezone)."
        data_type: timestamp

      - name: order_date
        description: "Partitioning date derived from order_ts."
        data_type: date
        tests: [not_null]

      - name: shipping_line_id
        description: "Unique id of the shipping line within an order."
        data_type: int64
        tests: [not_null]

      - name: tax_status
        description: "WooCommerce tax status for this shipping line."
        data_type: string
        tests:
          - accepted_values:
              arguments:
                values: ['taxable', 'none']
                quote: true

      - name: shipping_total
        description: "Total shipping amount for this line."
        data_type: numeric
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: ">= 0"

      - name: shipping_tax_total
        description: "Total tax amount applied to this shipping line."
        data_type: numeric
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: ">= 0"

      - name: carrier_service_code
        data_type: string
      - name: service_type
        data_type: string
      - name: collection_point
        data_type: string
      - name: delivery_dates
        data_type: string

    tests:
      - dbt_utils.unique_combination_of_columns:
          arguments:
            combination_of_columns: ['order_id', 'shipping_line_id']

  - name: stg_woocommerce__tax_lines
    description: "One row per tax line per order."
    config:
      contract:
        enforced: true
    columns:
      - name: order_id
        data_type: int64
        tests: [not_null]
      - name: tax_line_id
        data_type: int64
        tests: [not_null]
      - name: tax_total
        data_type: numeric
        tests:
          - dbt_utils.expression_is_true:
              arguments:
                expression: ">= 0"
    tests:
      - dbt_utils.unique_combination_of_columns:
          arguments:
            combination_of_columns: ['order_id', 'tax_line_id']
